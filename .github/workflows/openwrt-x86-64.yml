#
# This is free software, lisence use MIT.
# 
# Copyright (C) 2019 P3TERX <https://p3terx.com>
# Copyright (C) 2020 KFERMercer <KFER.Mercer@gmail.com>
# 
# <https://github.com/KFERMercer/OpenWrt-CI>
# 官方完整版openwrt

name: openwrt-x86-64
on:
  repository_dispatch:
  workflow_dispatch:
   
jobs:

  build_openwrt:
    name: Build OpenWrt firmware
    runs-on: ubuntu-latest
    
    steps:

      - name: Space cleanup
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          docker rmi `docker images -q`
          sudo rm -rf /usr/share/dotnet /etc/mysql /etc/php /etc/apt/sources.list.d /usr/local/lib/android
          sudo -E apt-get -y purge azure-cli ghc* zulu* hhvm llvm* firefox google* dotnet* powershell openjdk* adoptopenjdk* mysql* php* mongodb* dotnet* moby* snapd* || true
          sudo -E apt-get update 
          sudo -E apt-get -y install ack antlr3 aria2 asciidoc autoconf automake autopoint binutils bison build-essential bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libreadline-dev libssl-dev libtool lrzsz mkisofs msmtp nano ninja-build p7zip p7zip-full patch pkgconf python2.7 python3 python3-pip libpython3-dev qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev
          sudo -E apt-get -y autoremove --purge
          sudo -E apt-get clean
          df -h
          
      - name: Clone source code
        run: |
          git clone https://github.com/openwrt/openwrt          
      - name: Update feeds
        run: |
          cd openwrt
          
          cat >> feeds.conf.default <<EOF 
          #src-git kenzo https://github.com/kenzok8/openwrt-packages
          #src-git small https://github.com/kenzok8/small
          #src-git small8 https://github.com/kenzok8/small-package
          #src-git kiddin9 https://github.com/kiddin9/openwrt-packages
          # luci-app-passwall
          src-git passwall https://github.com/xiaorouji/openwrt-passwall
          # luci-app-ssr-plus
          src-git helloworld https://github.com/fw876/helloworld
          EOF
           
          ./scripts/feeds update -a                              
          ./scripts/feeds install -a
     
      - name: Generate configuration file
        run: |
          cd openwrt
          rm -f ./.config*
          touch ./.config          
          cat >> .config <<EOF               
          CONFIG_TARGET_x86=y
          CONFIG_TARGET_x86_64=y
          CONFIG_TARGET_x86_64_Generic=y
          CONFIG_TARGET_IMAGES_GZIP=y
          CONFIG_TARGET_ROOTFS_TARGZ=y
          CONFIG_TARGET_ROOTFS_PARTSIZE=1024
                    
         
          # CONFIG_PACKAGE_dnsmasq is not set
          CONFIG_LUCI_LANG_zh_Hans=y
          CONFIG_PACKAGE_luci-mod-admin-full=y
          CONFIG_PACKAGE_luci-app-opkg=y
          CONFIG_PACKAGE_luci-app-firewall=y
          CONFIG_PACKAGE_luci-mod-network=y
          CONFIG_PACKAGE_luci-mod-rpc=y
          CONFIG_PACKAGE_luci-mod-status=y
          CONFIG_PACKAGE_luci-mod-system=y
          CONFIG_PACKAGE_luci-theme-bootstrap=y
          
          CONFIG_PACKAGE_luci-app-uhttpd=y
          
          CONFIG_PACKAGE_dnsmasq_full=y
          CONFIG_PACKAGE_dnsmasq_full_dhcpv6=y
          CONFIG_PACKAGE_ipv6helper=y
          
          # docker
          CONFIG_PACKAGE_luci-app-docker=y
          CONFIG_PACKAGE_luci-lib-docker=y
          CONFIG_PACKAGE_luci-app-dockerman=y
          CONFIG_PACKAGE_luci-lib-jsonc=y
          # ssr低调上网Plus+
          CONFIG_PACKAGE_luci-app-ssr-plus=y
          # 证书ssl
          CONFIG_PACKAGE_luci-app-acme=y

          CONFIG_PACKAGE_kmod-usb-printer=y
          # FTP服务器
          CONFIG_PACKAGE_luci-app-vsftpd=y
          CONFIG_PACKAGE_luci-i18n-vsftpd-zh-cn=y
          #支持计划重启
          CONFIG_PACKAGE_luci-app-autoreboot=y
          
          CONFIG_PACKAGE_luci-app-diskman=y
          CONFIG_PACKAGE_luci-app-zerotier=y
          CONFIG_PACKAGE_luci-app-vnstat=y
          CONFIG_PACKAGE_luci-app-upnp=y
          CONFIG_PACKAGE_luci-app-netdata=y
          CONFIG_PACKAGE_luci-app-nlbwmon=y
          CONFIG_PACKAGE_luci-i18n-nlbwmon-zh-cn=y
          CONFIG_PACKAGE_luci-app-adbyby-plus=y
          CONFIG_PACKAGE_luci-app-smartdns=y
          CONFIG_PACKAGE_luci-app-vlmcsd=y
          CONFIG_PACKAGE_luci-app-ttyd=y
          CONFIG_PACKAGE_luci-app-turboacc=y
          CONFIG_PACKAGE_luci-app-passwall=y
          CONFIG_PACKAGE_luci-app-fileassistant=y
          CONFIG_PACKAGE_luci-app-webadmin=y
          CONFIG_PACKAGE_luci-app-openclash=y
          CONFIG_PACKAGE_luci-app-wireguard=y
          CONFIG_PACKAGE_luci-app-openvpn=y
          CONFIG_PACKAGE_luci-app-openvpn-server=y
          CONFIG_PACKAGE_luci-app-pptp-server=y
          CONFIG_PACKAGE_luci-app-frpc=y
          CONFIG_PACKAGE_luci-app-frps=y
          CONFIG_PACKAGE_luci-app-usb-printer=y
          CONFIG_PACKAGE_openssh-sftp-server=y
          CONFIG_PACKAGE_luci-i18n-firewall-zh-cn=y
          CONFIG_PACKAGE_luci-i18n-opkg-zh-cn=y
          
          
          EOF
          #
          # ===============================================================
          # 
          sed -i 's/^[ \t]*//g' ./.config
          make defconfig
          
      - name: Start SSH via tmate
        uses: rdp-studio/ssh2actions@main
        if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh  != 'false') || contains(github.event.action, 'ssh')
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
      
      - name: up config
        uses: actions/upload-artifact@v3
        with:
          name: OpenWrt_config
          path: ./openwrt/.config    
      
      - name: Make download
        run: |
          cd openwrt
          make download -j8 || make download -j1 V=s
          rm -rf $(find ./dl/ -size -1024c)
          df -h
      - name: Compile firmware
        run: |
          cd openwrt
          make -j$(nproc) || make -j1 V=s
          echo "======================="
          echo "Space usage:"
          echo "======================="
          df -h
          echo "======================="
          du -h ./ --max-depth=1
          du -h /mnt/openwrt/ --max-depth=1 || true
      - name: Prepare artifact
        run: |
          cd openwrt
          mkdir -p ./artifact/firmware
          mkdir -p ./artifact/package
          mkdir -p ./artifact/buildinfo
          rm -rf $(find ./bin/targets/ -type d -name "packages")
          cp -rf $(find ./bin/targets/ -type f) ./artifact/firmware/
          cp -rf $(find ./bin/packages/ -type f -name "*.ipk") ./artifact/package/
          cp -rf $(find ./bin/targets/ -type f -name "*.buildinfo" -o -name "*.manifest") ./artifact/buildinfo/
      - name: Deliver buildinfo
        uses: actions/upload-artifact@v3
        with:
          name: OpenWrt_buildinfo
          path: ./openwrt/artifact/buildinfo/

      - name: Deliver package
        uses: actions/upload-artifact@v3
        with:
          name: OpenWrt_package
          path: ./openwrt/artifact/package/
          
      - name: Deliver firmware
        uses: actions/upload-artifact@v3
        with:
          name: OpenWrt_firmware
          path: ./openwrt/bin/targets/
